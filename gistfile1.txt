{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Component 1 - Transportable Array"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Modules and Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from haversine import haversine\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from mpl_toolkits.basemap import Basemap\n",
    "import ipywidgets\n",
    "import matplotlib.gridspec as gridspec\n",
    "import cartopy\n",
    "from matplotlib import animation\n",
    "from IPython.display import Audio\n",
    "import seaborn as sns\n",
    "from scipy import signal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "array_vals = pd.read_csv(\"data-readonly/transportable_array/data_tohoku_norm_transpose.csv\", header=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## This code comes from Prof Turk. Translates our 4 hour time period into the time of day between 2:46pm and 6:46pm. \n",
    "v = pd.date_range(\"2:46PM\", \"6:46PM\", freq=\"1s\")\n",
    "v -= v[0]\n",
    "array_vals[\"time\"] = v\n",
    "array_vals.set_index(\"time\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "date_range = pd.date_range(\"2:46PM\", \"6:46PM\", freq=\"1s\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Now bringing in longitude and latitudes of stations\n",
    "locations = pd.read_csv(\"/srv/nbgrader/data/transportable_array/location.txt\",\n",
    "                        delimiter=\"\\t\", names =[\"longitude\", \"latitude\", \"a\", \"b\"])\n",
    "del locations[\"a\"], locations[\"b\"]\n",
    "locations = locations.T\n",
    "#locations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "stations = pd.concat([locations, array_vals]) \n",
    "#stations.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating Distances with Haversine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# longitude and latitude of Tohoku quake c/o Google \n",
    "tohoku_quake = (38.3, 142.4)\n",
    "station1 = stations[3][1], stations[3][0] # latitude then longitude\n",
    "haversine(tohoku_quake, station1, miles = True)\n",
    "\n",
    "#dist_from_quake = \n",
    "dists = []\n",
    "for s in stations:\n",
    "    station = stations[s][1], stations[s][0]\n",
    "    dist = haversine(tohoku_quake, station, miles = True)\n",
    "    dists.append(dist)\n",
    "    \n",
    "distances = pd.DataFrame(dists)\n",
    "distances.columns = ['dist']\n",
    "distances.sort_values(by = 'dist', inplace = True, ascending = True)\n",
    "#... okay, getting late. Here, planning to... \n",
    "# 1. calcuate distance between stations and Tohoku quake\n",
    "# 2. sort them in order of least to greatest distance, but need to also retain the original index.\n",
    "# 3. Use this new order in the graphing code below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dataframe with Stations, Distances, Coordinates, Time & Reading Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test2 = stations.T\n",
    "distances1 = distances\n",
    "distOrder = pd.merge(distances1, left_index=True, right_index=True, right=test2)\n",
    "distOrder.head()\n",
    "testt = pd.DataFrame(distOrder)\n",
    "testt.reset_index(inplace = True)\n",
    "#testt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Dropping the 'index' column, not the actual index\n",
    "#testt.drop('index', axis = 1, inplace = True)\n",
    "#testt.loc[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d23c56919c7840c0ac1e0f9aab2c6e7f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>interactive</code>.</p>\n",
       "<p>\n",
       "  If you're reading this message in the Jupyter Notebook or JupyterLab Notebook, it may mean\n",
       "  that the widgets JavaScript is still loading. If this message persists, it\n",
       "  likely means that the widgets JavaScript library is either not installed or\n",
       "  not enabled. See the <a href=\"https://ipywidgets.readthedocs.io/en/stable/user_install.html\">Jupyter\n",
       "  Widgets Documentation</a> for setup instructions.\n",
       "</p>\n",
       "<p>\n",
       "  If you're reading this message in another frontend (for example, a static\n",
       "  rendering on GitHub or <a href=\"https://nbviewer.jupyter.org/\">NBViewer</a>),\n",
       "  it may mean that your frontend doesn't currently support widgets.\n",
       "</p>\n"
      ],
      "text/plain": [
       "interactive(children=(IntSlider(value=2000, description='time', max=14400), IntSlider(value=0, description='station', max=437), Output()), _dom_classes=('widget-interact',))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "######################################\n",
    "#**** SEISMOGRAPH LINE PLOT ONLY ****#\n",
    "######################################\n",
    "@ipywidgets.interact(time = (0, 14400, 1), station = (0, 437, 1))\n",
    "def make_plot(time = 2000, station = 0):\n",
    "    i = 5\n",
    "    plt.subplot(211)\n",
    "    plt.plot(testt.loc[station][4:i+time].values)\n",
    "    plt.xlim(0, 14000)\n",
    "    plt.ylim(-1.0, 1.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception ignored in: <bound method Wave_write.__del__ of <wave.Wave_write object at 0x7f59cb56e8d0>>\n",
      "Traceback (most recent call last):\n",
      "  File \"/opt/conda/lib/python3.6/wave.py\", line 316, in __del__\n",
      "    self.close()\n",
      "  File \"/opt/conda/lib/python3.6/wave.py\", line 434, in close\n",
      "    self._ensure_header_written(0)\n",
      "  File \"/opt/conda/lib/python3.6/wave.py\", line 454, in _ensure_header_written\n",
      "    raise Error('sample width not specified')\n",
      "wave.Error: sample width not specified\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "'Play' object is not callable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-221-564f3de31ea0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mtestt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0mipywidgets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPlay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtime\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m14400\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m437\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mdef\u001b[0m \u001b[0mmake_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtime\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m2000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0mi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0mvals\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray_vals\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'Play' object is not callable"
     ]
    }
   ],
   "source": [
    "##############################################\n",
    "#**** SEISMOGRAPH READINGS NORMALIZED(?) ****#\n",
    "##############################################\n",
    "\n",
    "testt.fillna(0, inplace = True)\n",
    "@ipywidgets.interact(time = (0, 14400, 1), station = (0, 437, 1))\n",
    "def make_plot(time = 2000, station = 0):\n",
    "    i = 5\n",
    "    vals = array_vals\n",
    "    normalisedVals = ( vals - np.nanmin(vals) ) / ( np.nanmax(vals) - np.nanmin(vals) )\n",
    "    normalisedVals = normalisedVals.astype(np.float)\n",
    "\n",
    "    plt.hexbin(range(0, len(testt.loc[station][4:i+time].values)),\n",
    "               testt.loc[station][4:i+time].values,\n",
    "              vmin = normalisedVals.min().min(),\n",
    "              vmax = normalisedVals.max().max(),\n",
    "              cmap = 'viridis')\n",
    "    plt.colorbar()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrogram (?) & Line Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5f735f1c600f4414a11319a9693ec98d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>interactive</code>.</p>\n",
       "<p>\n",
       "  If you're reading this message in the Jupyter Notebook or JupyterLab Notebook, it may mean\n",
       "  that the widgets JavaScript is still loading. If this message persists, it\n",
       "  likely means that the widgets JavaScript library is either not installed or\n",
       "  not enabled. See the <a href=\"https://ipywidgets.readthedocs.io/en/stable/user_install.html\">Jupyter\n",
       "  Widgets Documentation</a> for setup instructions.\n",
       "</p>\n",
       "<p>\n",
       "  If you're reading this message in another frontend (for example, a static\n",
       "  rendering on GitHub or <a href=\"https://nbviewer.jupyter.org/\">NBViewer</a>),\n",
       "  it may mean that your frontend doesn't currently support widgets.\n",
       "</p>\n"
      ],
      "text/plain": [
       "interactive(children=(IntSlider(value=2000, description='time', max=14400), IntSlider(value=0, description='station', max=437), Output()), _dom_classes=('widget-interact',))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "################################\n",
    "#**** SEISMOGRAPH READINGS ****#\n",
    "################################\n",
    "\n",
    "@ipywidgets.interact(time = (0, 14400, 1), station = (0, 437, 1))\n",
    "def make_plot(time = 2000, station = 0):\n",
    "    i = 5\n",
    "    plt.subplot(211)\n",
    "    plt.plot(testt.loc[station][4:i+time].values)\n",
    "    plt.xlim(0, 14000)\n",
    "    plt.ylim(-1.0, 1.0)\n",
    "    \n",
    "    vmin = array_vals.min().min() \n",
    "    vmax = array_vals.max().max()\n",
    "    \n",
    "    plt.subplot(212)\n",
    "    plt.hexbin(range(0, len(testt.loc[station][4:i+time].values)), testt.loc[station][4:i+time].values, cmap = 'viridis', vmin = vmin, vmax = vmax)\n",
    "    plt.colorbar()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stations Map\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nxp238s3/iQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f59cdd75ba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0d62bda970694f69aa938c2e4496b4c5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>interactive</code>.</p>\n",
       "<p>\n",
       "  If you're reading this message in the Jupyter Notebook or JupyterLab Notebook, it may mean\n",
       "  that the widgets JavaScript is still loading. If this message persists, it\n",
       "  likely means that the widgets JavaScript library is either not installed or\n",
       "  not enabled. See the <a href=\"https://ipywidgets.readthedocs.io/en/stable/user_install.html\">Jupyter\n",
       "  Widgets Documentation</a> for setup instructions.\n",
       "</p>\n",
       "<p>\n",
       "  If you're reading this message in another frontend (for example, a static\n",
       "  rendering on GitHub or <a href=\"https://nbviewer.jupyter.org/\">NBViewer</a>),\n",
       "  it may mean that your frontend doesn't currently support widgets.\n",
       "</p>\n"
      ],
      "text/plain": [
       "interactive(children=(IntSlider(value=0, description='station', max=437), Output()), _dom_classes=('widget-interact',))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "##################################\n",
    "#******* STATION LOCATOR ********# \n",
    "##################################\n",
    "\n",
    "states = cartopy.io.shapereader.natural_earth(resolution='110m',\n",
    "                                              category='cultural',\n",
    "                                              name='admin_1_states_provinces_lakes_shp')\n",
    "reader = cartopy.io.shapereader.Reader(states)\n",
    "all_states = list(reader.records())\n",
    "all_states[0]\n",
    "geometries = [state.geometry for state in all_states]\n",
    "\n",
    "fig = plt.figure()\n",
    "ax1 = fig.add_subplot(111, projection = cartopy.crs.LambertConformal())\n",
    "ax1.set_extent([-125, -66.5, 20, 50], cartopy.crs.Geodetic())\n",
    "ax1.add_geometries(geometries, crs = cartopy.crs.PlateCarree(), facecolors = 'white', edgecolors = 'lightblue', zorder = 0)\n",
    "\n",
    "#lat = testt[:]['latitude'].values\n",
    "#lon = testt[:]['longitude'].values\n",
    "@ipywidgets.interact(station = (0, 437, 1))\n",
    "def plot_station(station = 0):\n",
    "    scat = ax1.scatter(testt.loc[station]['longitude'], \n",
    "                testt.loc[station]['latitude'], \n",
    "                transform = cartopy.crs.Geodetic(), \n",
    "                s = 10, \n",
    "                c = 'k',\n",
    "               zorder = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "states = cartopy.io.shapereader.natural_earth(resolution='110m',\n",
    "                                          category='cultural',\n",
    "                                          name='admin_1_states_provinces_lakes_shp')\n",
    "reader = cartopy.io.shapereader.Reader(states)\n",
    "all_states = list(reader.records())\n",
    "all_states[0]\n",
    "geometries = [state.geometry for state in all_states]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Component 1 Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5fedfbca8b7e4799af31c46bc9d2d206",
       "version_major": 2,
       "version_minor": 0
      },
      "text/html": [
       "<p>Failed to display Jupyter Widget of type <code>interactive</code>.</p>\n",
       "<p>\n",
       "  If you're reading this message in the Jupyter Notebook or JupyterLab Notebook, it may mean\n",
       "  that the widgets JavaScript is still loading. If this message persists, it\n",
       "  likely means that the widgets JavaScript library is either not installed or\n",
       "  not enabled. See the <a href=\"https://ipywidgets.readthedocs.io/en/stable/user_install.html\">Jupyter\n",
       "  Widgets Documentation</a> for setup instructions.\n",
       "</p>\n",
       "<p>\n",
       "  If you're reading this message in another frontend (for example, a static\n",
       "  rendering on GitHub or <a href=\"https://nbviewer.jupyter.org/\">NBViewer</a>),\n",
       "  it may mean that your frontend doesn't currently support widgets.\n",
       "</p>\n"
      ],
      "text/plain": [
       "interactive(children=(IntSlider(value=0, description='time', max=14400), IntSlider(value=0, description='station', max=437), Output()), _dom_classes=('widget-interact',))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "@ipywidgets.interact(station = (0, 437, 1), time = (0, 14400, 1))\n",
    "def make_plot(time = 0, station = 0):\n",
    "    gs = gridspec.GridSpec(25, 10)\n",
    "    fig = plt.gcf()\n",
    "    fig = plt.figure(figsize=(25, 10))\n",
    "    ax1 = fig.add_subplot(gs[:, :5], projection = cartopy.crs.LambertConformal())\n",
    "    ax2 = fig.add_subplot(gs[4:12, 6:])\n",
    "    ax3 = fig.add_subplot(gs[13:21, 6:])\n",
    "\n",
    "    i = 5\n",
    "    ax2.plot(testt.loc[station][4:i+time].values)\n",
    "    ax2.set_xlim(0, 14000)\n",
    "    ax2.set_ylim(-1.0, 1.0)\n",
    "    \n",
    "    vmin = array_vals.min().min() \n",
    "    vmax = array_vals.max().max()\n",
    "    \n",
    "    i = 5\n",
    "    vals = array_vals\n",
    "    normalisedVals = ( vals - np.nanmin(vals) ) / ( np.nanmax(vals) - np.nanmin(vals) )\n",
    "    normalisedVals = normalisedVals.astype(np.float)\n",
    "\n",
    "    ax3.hexbin(np.arange(14401), np.abs(testt.loc[station][4:].values), bins = 'log')\n",
    "    #fig.colorbar(ax3)\n",
    "    \n",
    "    ax1.set_extent([-125, -66.5, 20, 50], cartopy.crs.Geodetic())\n",
    "    ax1.add_geometries(geometries, crs = cartopy.crs.PlateCarree(), facecolors = 'lightblue', edgecolors = 'blue', zorder = 0)\n",
    "\n",
    "    ax1.scatter(testt.loc[station]['longitude'], \n",
    "            testt.loc[station]['latitude'], \n",
    "            transform = cartopy.crs.Geodetic(), \n",
    "            s = 35, \n",
    "            c = 'k',\n",
    "            zorder = 1)\n",
    "    \n",
    "    # Audio\n",
    "    normed = (array_vals[0] - array_vals[0].min())/(array_vals[0].max() - array_vals[0].min()) * 2 - 1\n",
    "    a = Audio(normed, rate=44100/8)\n",
    "    #fig.add_subplot(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'<=' not supported between instances of 'NoneType' and 'int'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-219-a2c89081c14b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mnormed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0marray_vals\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0marray_vals\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray_vals\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0marray_vals\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAudio\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnormed\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/IPython/lib/display.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, filename, url, embed, rate, autoplay)\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 99\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_wav\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mrate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mreload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/IPython/lib/display.py\u001b[0m in \u001b[0;36m_make_wav\u001b[0;34m(self, data, rate)\u001b[0m\n\u001b[1;32m    151\u001b[0m         \u001b[0mwaveobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwave\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'wb'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m         \u001b[0mwaveobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetnchannels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnchan\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 153\u001b[0;31m         \u001b[0mwaveobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetframerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    154\u001b[0m         \u001b[0mwaveobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetsampwidth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m         \u001b[0mwaveobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetcomptype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'NONE'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'NONE'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/wave.py\u001b[0m in \u001b[0;36msetframerate\u001b[0;34m(self, framerate)\u001b[0m\n\u001b[1;32m    352\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_datawritten\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    353\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'cannot change parameters after starting to write'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 354\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mframerate\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    355\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'bad frame rate'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    356\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_framerate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframerate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: '<=' not supported between instances of 'NoneType' and 'int'"
     ]
    }
   ],
   "source": [
    "normed = (array_vals[0] - array_vals[0].min())/(array_vals[0].max() - array_vals[0].min()) * 2 - 1\n",
    "a = Audio(normed, rate=44100/8)\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrogram\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "#x = testt.loc[station][4:].values\n",
    "y = np.arange(14401)\n",
    "\n",
    "ind = list(testt.columns)\n",
    "new = testt.loc[0][ind[4:]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f59cbbad630>"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f59cbdccef0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hexbin(y, np.abs(new))\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "@ipywidgets.Dropdown?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "@ipywidgets.Dropdown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "@ipywidgets.Password"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
